package controller

import (
	"encoding/json"
	"errors"
	"fmt"
	"getwiki/model"
	"io/ioutil"
	"net/http"
)

// AutoGenerated Builds The Struct
type AutoGenerated struct {
	Batchcomplete string   `json:"batchcomplete"`
	Warnings      Warnings `json:"warnings"`
	Query         Query    `json:"query"`
}

// Extracts Sub Struct
type Extracts struct {
	NAMING_FAILED string `json:"*"`
}

// Warnings substruct
type Warnings struct {
	Extracts Extracts `json:"extracts"`
}

// Normalized substruct
type Normalized struct {
	From string `json:"from"`
	To   string `json:"to"`
}

// Data The Unknown Page id
type Data struct {
	Pageid  int    `json:"pageid"`
	Ns      int    `json:"ns"`
	Title   string `json:"title"`
	Extract string `json:"extract"`
}

// Query substruct
type Query struct {
	Normalized []Normalized    `json:"normalized"`
	Pages      map[string]Data `json:"pages"`
}

// Getwiki Gets the Wiki
func Getwiki(search string) (*model.Article, error) {
	client := &http.Client{}
	req, err := http.NewRequest(
		http.MethodGet,
		fmt.Sprintf(
			"https://en.wikipedia.org/w/api.php?action=query&titles=%s&prop=extracts&format=json",
			search,
		),
		nil,
	)
	if err != nil {
		return &model.Article{}, err
	}
	req.Header.Set("User-Agent", "Mozilla/5.0 (Windows NT 6.1; rv:57.0) Gecko/20100101 Firefox/57.0")
	res, err := client.Do(req)
	if err != nil {
		return &model.Article{}, err
	}
	defer res.Body.Close()
	body, err := ioutil.ReadAll(res.Body)
	if err != nil {
		return &model.Article{}, err
	}
	var wikijson AutoGenerated
	json.Unmarshal(body, &wikijson)
	var title string
	var description string
	var article model.Article
	for i := range wikijson.Query.Pages {
		title = wikijson.Query.Pages[i].Title
		description = wikijson.Query.Pages[i].Extract
	}
	intro := description[0:300]

	if len(description) > 0 {
		article = model.Article{
			ID:    0,
			Title: title,
			Body:  description,
			Intro: intro,
		}
		return &article, nil
	}
	return &article, errors.New("Not Found")
}
